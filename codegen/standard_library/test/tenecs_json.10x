package test

import tenecs.json.JsonError
import tenecs.json.parseArray
import tenecs.json.parseBoolean
import tenecs.json.parseInt
import tenecs.json.parseOr
import tenecs.json.parseString
import tenecs.json.toJson
import tenecs.string.join
import tenecs.test.Assert
import tenecs.test.UnitTestRegistry
import tenecs.test.UnitTests

struct Post(
  title: String
)

toJsonTests := implement UnitTests {
  public tests := (registry: UnitTestRegistry): Void => {
    registry.test("toJson", (assert: Assert): Void => {
      assert.equal("42", toJson(42))
      assert.equal("true", toJson(true))
      assert.equal("\"rawr\"", toJson("rawr"))
      assert.equal("{\"title\":\"the title\"}", toJson(Post("the title")))
      assert.equal("[]", toJson([String]()))
      assert.equal("[\"wow\"]", toJson([String]("wow")))
    })
  }
}

parseBooleanTests := implement UnitTests {
  public tests := (registry: UnitTestRegistry): Void => {
    registry.test("true", (assert: Assert): Void => {
      assert.equal(true, tryParse("true"))
    })
    registry.test("false", (assert: Assert): Void => {
      assert.equal(false, tryParse("false"))
    })
    registry.test("fail f", (assert: Assert): Void => {
      assert.equal("error: Could not parse Boolean from f", tryParse("f"))
    })
  }

  parser := parseBoolean()

  tryParse := (input: String): String | Boolean => {
    result := parser.parse(input)
    when result {
      is JsonError => {
        join("error: ", result.message)
      }
      is Boolean => {
        result
      }
    }
  }
}

parseIntTests := implement UnitTests {
  public tests := (registry: UnitTestRegistry): Void => {
    registry.test("0", (assert: Assert): Void => {
      assert.equal(0, tryParse("0"))
    })
    registry.test("1234567", (assert: Assert): Void => {
      assert.equal(1234567, tryParse("1234567"))
    })
    registry.test("fail 0.1", (assert: Assert): Void => {
      assert.equal("error: Could not parse Int from 0.1", tryParse("0.1"))
    })
  }

  parser := parseInt()

  tryParse := (input: String): String | Int => {
    result := parser.parse(input)
    when result {
      is JsonError => {
        join("error: ", result.message)
      }
      is Int => {
        result
      }
    }
  }
}

parseOrTests := implement UnitTests {
  public tests := (registry: UnitTestRegistry): Void => {
    registry.test("string", (assert: Assert): Void => {
      assert.equal("foo", tryParse("\"foo\""))
    })
    registry.test("boolean", (assert: Assert): Void => {
      assert.equal(true, tryParse("true"))
    })
    registry.test("error", (assert: Assert): Void => {
      assert.equal("error: Could not parse from 1", tryParse("1"))
    })
  }

  parser := parseOr(parseString(), parseBoolean())

  tryParse := (input: String): String | Boolean => {
    result := parser.parse(input)
    when result {
      is JsonError => {
        join("error: ", result.message)
      }
      is String => {
        result
      }
      is Boolean => {
        result
      }
    }
  }
}

parseStringTests := implement UnitTests {
  public tests := (registry: UnitTestRegistry): Void => {
    parser := parseString()
    tryParse := (input: String): String => {
      result := parser.parse(input)
      when result {
        is JsonError => {
          join("error: ", result.message)
        }
        is String => {
          result
        }
      }
    }
    registry.test("empty", (assert: Assert): Void => {
      assert.equal("", tryParse("\"\""))
    })
    registry.test("foo", (assert: Assert): Void => {
      assert.equal("foo", tryParse("\"foo\""))
    })
    registry.test("error", (assert: Assert): Void => {
      assert.equal("error: Could not parse String from 1", tryParse("1"))
    })
  }
}

parseArrayTests := implement UnitTests {
  public tests := (registry: UnitTestRegistry): Void => {
    registry.test("empty string array", (assert: Assert): Void => {
      parser := parseArray(parseString())
      assert.equal([String](), toArrayOfStringOrString(parser.parse("[]")))
    })
    registry.test("array with empty array", (assert: Assert): Void => {
      parser := parseArray(parseArray(parseString()))
      assert.equal([Array<String>]([String]()), toArrayOfArrayOfStringOrString(parser.parse("[[]]")))
    })
    registry.test("nested failure", (assert: Assert): Void => {
      parser := parseArray(parseString())
      assert.equal("error: Could not parse String from 1", toArrayOfStringOrString(parser.parse("[1]")))
    })
    registry.test("couple elements", (assert: Assert): Void => {
      parser := parseArray(parseString())
      assert.equal([String]("a", "b"), toArrayOfStringOrString(parser.parse("[\"a\", \"b\"]")))
    })
  }

  toArrayOfStringOrString := (input: Array<String> | JsonError): Array<String> | String => {
    when input {
      is Array<String> => {
        input
      }
      is JsonError => {
        join("error: ", input.message)
      }
    }
  }

  toArrayOfArrayOfStringOrString := (input: Array<Array<String>> | JsonError): Array<Array<String>> | String => {
    when input {
      is Array<Array<String>> => {
        input
      }
      is JsonError => {
        join("error: ", input.message)
      }
    }
  }
}
