package test

import tenecs.json.JsonError
import tenecs.json.parseArray
import tenecs.json.parseBoolean
import tenecs.json.parseInt
import tenecs.json.parseOr
import tenecs.json.parseString
import tenecs.json.toJson
import tenecs.test.Assert
import tenecs.test.UnitTestRegistry
import tenecs.test.UnitTests
import tenecs.string.join


struct Post(title: String)

toJsonTests := implement UnitTests {
  public tests := (registry: UnitTestRegistry): Void => {
    registry.test("toJson", (assert: Assert): Void => {
      assert.equal<String>("42", toJson<Int>(42))
      assert.equal<String>("true", toJson<Boolean>(true))
      assert.equal<String>("\"rawr\"", toJson<String>("rawr"))
      assert.equal<String>("{\"title\":\"the title\"}", toJson<Post>(Post("the title")))
      assert.equal<String>("[]", toJson<Array<String>>([String]()))
      assert.equal<String>("[\"wow\"]", toJson<Array<String>>([String]("wow")))
    })
  }
}

parseBooleanTests := implement UnitTests {
  public tests := (registry: UnitTestRegistry): Void => {
    parser := parseBoolean()
    registry.test("true", (assert: Assert): Void => {
      assert.equal<Boolean | String>(true, toBooleanOrString(parser.parse("true")))
    })
    registry.test("false", (assert: Assert): Void => {
      assert.equal<Boolean | String>(false, toBooleanOrString(parser.parse("false")))
    })
    registry.test("fail f", (assert: Assert): Void => {
      assert.equal<Boolean | String>("Could not parse Boolean from f", toBooleanOrString(parser.parse("f")))
    })
  }
}

toBooleanOrString := (input: Boolean | JsonError): Boolean | String => {
  when input {
    is Boolean => {
      input
    }
    is JsonError => {
      input.message
    }
  }
}

parseIntTests := implement UnitTests {
  public tests := (registry: UnitTestRegistry): Void => {
    parser := parseInt()
    registry.test("0", (assert: Assert): Void => {
      assert.equal<Int | String>(0, toIntOrString(parser.parse("0")))
    })
    registry.test("1234567", (assert: Assert): Void => {
      assert.equal<Int | String>(1234567, toIntOrString(parser.parse("1234567")))
    })
    registry.test("fail 0.1", (assert: Assert): Void => {
      assert.equal<Int | String>("Could not parse Int from 0.1", toIntOrString(parser.parse("0.1")))
    })
  }
}

toIntOrString := (input: Int | JsonError): Int | String => {
  when input {
    is Int => {
      input
    }
    is JsonError => {
      input.message
    }
  }
}

parseOrTests := implement UnitTests {
  public tests := (registry: UnitTestRegistry): Void => {
    parser := parseOr<String, Boolean>(parseString(), parseBoolean())
    tryParse := (input: String): String | Boolean => {
      result := parser.parse(input)
      when result {
        is JsonError => {
          join("error: ", result.message)
        }
        is String => {
          result
        }
        is Boolean => {
          result
        }
      }
    }

    registry.test("string", (assert: Assert): Void => {
      assert.equal<String | Boolean>("foo", tryParse("\"foo\""))
    })
    registry.test("boolean", (assert: Assert): Void => {
      assert.equal<String | Boolean>(true, tryParse("true"))
    })
    registry.test("error", (assert: Assert): Void => {
      assert.equal<String | Boolean>("error: Could not parse from 1", tryParse("1"))
    })
  }
}

parseStringTests := implement UnitTests {
  public tests := (registry: UnitTestRegistry): Void => {
    parser := parseString()
    registry.test("empty", (assert: Assert): Void => {
      assert.equal<String>("", toString(parser.parse("\"\"")))
    })
    registry.test("foo", (assert: Assert): Void => {
      assert.equal<String>("foo", toString(parser.parse("\"foo\"")))
    })
    registry.test("error", (assert: Assert): Void => {
      assert.equal<String>("error: Could not parse String from 1", toString(parser.parse("1")))
    })
  }
}

toString := (input: String | JsonError): String => {
  when input {
    is String => {
      input
    }
    is JsonError => {
      join("error: ", input.message)
    }
  }
}

parseArrayTests := implement UnitTests {
  public tests := (registry: UnitTestRegistry): Void => {
    registry.test("empty string array", (assert: Assert): Void => {
      parser := parseArray<String>(parseString())
      assert.equal<Array<String> | String>([String](), toArrayOfStringOrString(parser.parse("[]")))
    })
    registry.test("array with empty array", (assert: Assert): Void => {
      parser := parseArray<Array<String>>(parseArray<String>(parseString()))
      assert.equal<Array<Array<String>> | String>([Array<String>]([String]()), toArrayOfArrayOfStringOrString(parser.parse("[[]]")))
    })
    registry.test("nested failure", (assert: Assert): Void => {
      parser := parseArray<String>(parseString())
      assert.equal<Array<String> | String>("error: Could not parse String from 1", toArrayOfStringOrString(parser.parse("[1]")))
    })
    registry.test("couple elements", (assert: Assert): Void => {
      parser := parseArray<String>(parseString())
      assert.equal<Array<String> | String>([String]("a", "b"), toArrayOfStringOrString(parser.parse("[\"a\", \"b\"]")))
    })
  }
}

toArrayOfStringOrString := (input: Array<String> | JsonError): Array<String> | String => {
  when input {
    is Array<String> => {
      input
    }
    is JsonError => {
      join("error: ", input.message)
    }
  }
}

toArrayOfArrayOfStringOrString := (input: Array<Array<String>> | JsonError): Array<Array<String>> | String => {
  when input {
    is Array<Array<String>> => {
      input
    }
    is JsonError => {
      join("error: ", input.message)
    }
  }
}