package test

import tenecs.error.Error
import tenecs.error.error
import tenecs.json.JsonField
import tenecs.json.jsonArray
import tenecs.json.jsonBoolean
import tenecs.json.jsonInt
import tenecs.json.jsonObject0
import tenecs.json.jsonObject1
import tenecs.json.jsonObject2
import tenecs.json.jsonOr
import tenecs.json.jsonString
import tenecs.string.join
import tenecs.test.UnitTestKit
import tenecs.test.UnitTestRegistry
import tenecs.test.UnitTests

struct Post(
  title: String
)

struct Todo(title: String, done: Boolean)

jsonStringTests := implement UnitTests {
  tests := (registry: UnitTestRegistry): Void => {
    fromJson := jsonString().fromJson
    toJson := jsonString().toJson
    registry.test("empty", (testkit: UnitTestKit): Void => {
      testkit.assert.equal("", fromJson("\"\""))
      testkit.assert.equal(toJson(""), "\"\"")
    })
    registry.test("foo", (testkit: UnitTestKit): Void => {
      testkit.assert.equal("foo", fromJson("\"foo\""))
      testkit.assert.equal(toJson("foo"), "\"foo\"")
    })
    registry.test("error", (testkit: UnitTestKit): Void => {
      testkit.assert.equal(error("Could not parse String from 1"), fromJson("1"))
    })
  }
}

jsonBooleanTests := implement UnitTests {
  tests := (registry: UnitTestRegistry): Void => {
    fromJson := jsonBoolean().fromJson
    toJson := jsonBoolean().toJson
    registry.test("true", (testkit: UnitTestKit): Void => {
      testkit.assert.equal(true, fromJson("true"))
      testkit.assert.equal(toJson(true), "true")
    })
    registry.test("false", (testkit: UnitTestKit): Void => {
      testkit.assert.equal(false, fromJson("false"))
      testkit.assert.equal(toJson(false), "false")
    })
    registry.test("fail f", (testkit: UnitTestKit): Void => {
      testkit.assert.equal(error("Could not parse Boolean from f"), fromJson("f"))
    })
  }
}

jsonIntTests := implement UnitTests {
  tests := (registry: UnitTestRegistry): Void => {
    fromJson := jsonInt().fromJson
    toJson := jsonInt().toJson
    registry.test("0", (testkit: UnitTestKit): Void => {
      testkit.assert.equal(0, fromJson("0"))
      testkit.assert.equal(toJson(0), "0")
    })
    registry.test("1234567", (testkit: UnitTestKit): Void => {
      testkit.assert.equal(1234567, fromJson("1234567"))
      testkit.assert.equal(toJson(1234567), "1234567")
    })
    registry.test("fail 0.1", (testkit: UnitTestKit): Void => {
      testkit.assert.equal(error("Could not parse Int from 0.1"), fromJson("0.1"))
    })
  }
}

jsonArrayTests := implement UnitTests {
  tests := (registry: UnitTestRegistry): Void => {
    registry.test("empty string array", (testkit: UnitTestKit): Void => {
      schema := jsonArray(jsonString())
      testkit.assert.equal([String](), schema.fromJson("[]"))
      testkit.assert.equal(schema.toJson([String]()), "[]")
    })
    registry.test("array with empty array", (testkit: UnitTestKit): Void => {
      schema := jsonArray(jsonArray(jsonString()))
      testkit.assert.equal([Array<String>]([String]()), schema.fromJson("[[]]"))
      testkit.assert.equal(schema.toJson([Array<String>]([String]())), "[[]]")
    })
    registry.test("nested failure", (testkit: UnitTestKit): Void => {
      schema := jsonArray(jsonString())
      testkit.assert.equal(error("Could not parse String from 1"), schema.fromJson("[1]"))
    })
    registry.test("couple elements", (testkit: UnitTestKit): Void => {
      schema := jsonArray(jsonString())
      testkit.assert.equal([String]("a", "b"), schema.fromJson("[\"a\", \"b\"]"))
      testkit.assert.equal(schema.toJson([String]("a", "b")), "[\"a\",\"b\"]")
    })
  }
}

jsonObjectTests := implement UnitTests {
  tests := (registry: UnitTestRegistry): Void => {
    registry.test("jsonObject0", (testkit: UnitTestKit): Void => {
      assert := testkit.assert
      schema := jsonObject0((): String => {
        "ok"
      })
      assert.equal("ok", schema.fromJson("{}"))
      assert.equal("ok", schema.fromJson("{\"a\":true}"))
      assert.equal(error("Could not parse object from 1"), schema.fromJson("1"))
      assert.equal(schema.toJson(""), "{}")
      assert.equal(schema.toJson("foo"), "{}")
    })
    registry.test("jsonObject1", (testkit: UnitTestKit): Void => {
      assert := testkit.assert
      schema := jsonObject1(Post, JsonField("title", jsonString(), (post: Post) => post.title))
      assert.equal(Post("the title"), schema.fromJson("{\"title\":\"the title\"}"))
      assert.equal(schema.toJson(Post("the title")), "{\"title\":\"the title\"}")
      assert.equal(error("Could not find object field \"title\" in {\"a\":true}"), schema.fromJson("{\"a\":true}"))
      assert.equal(error("Could not parse object field \"title\": Could not parse String from true"), schema.fromJson("{\"title\":true}"))
      assert.equal(error("Could not parse object from 1"), schema.fromJson("1"))
    })
    registry.test("jsonObject2", (testkit: UnitTestKit): Void => {
      assert := testkit.assert
      schema := jsonObject2(
        Todo,
        JsonField("title", jsonString(), (todo: Todo) => todo.title),
        JsonField("done", jsonBoolean(), (todo: Todo) => todo.done)
      )
      assert.equal(Todo("do it", false), schema.fromJson("{\"title\":\"do it\",\"done\":false}"))
      assert.equal(schema.toJson(Todo("do it", false)), "{\"done\":false,\"title\":\"do it\"}")
      assert.equal(Todo("done it", true), schema.fromJson("{\"title\":\"done it\",\"done\":true}"))
      assert.equal(schema.toJson(Todo("done it", true)), "{\"done\":true,\"title\":\"done it\"}")
      assert.equal(error("Could not find object field \"title\" in {\"done\":true}"), schema.fromJson("{\"done\":true}"))
      assert.equal(error("Could not find object field \"done\" in {\"title\":\"do\"}"), schema.fromJson("{\"title\":\"do\"}"))
      assert.equal(error("Could not parse object field \"title\": Could not parse String from true"), schema.fromJson("{\"title\":true}"))
      assert.equal(error("Could not parse object field \"done\": Could not parse Boolean from 1"), schema.fromJson("{\"title\":\"do it\",\"done\":1}"))
      assert.equal(error("Could not parse object from 1"), schema.fromJson("1"))
    })
  }
}

parseOrTests := implement UnitTests {
  tests := (registry: UnitTestRegistry): Void => {
    schema := jsonOr(jsonString(), jsonBoolean(), (strOrBool) => when strOrBool {
      is String => { jsonString() }
      is Boolean => { jsonBoolean() }
    })
    registry.test("string", (testkit: UnitTestKit): Void => {
      testkit.assert.equal("foo", schema.fromJson("\"foo\""))
      testkit.assert.equal(schema.toJson("foo"), "\"foo\"")
    })
    registry.test("boolean", (testkit: UnitTestKit): Void => {
      testkit.assert.equal(true, schema.fromJson("true"))
      testkit.assert.equal(schema.toJson(true), "true")
    })
    registry.test("error", (testkit: UnitTestKit): Void => {
      testkit.assert.equal(error("Could not parse from 1"), schema.fromJson("1"))
    })
  }
}


