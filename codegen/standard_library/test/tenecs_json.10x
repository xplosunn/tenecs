package test

import tenecs.json.JsonError
import tenecs.json.field
import tenecs.json.parseArray
import tenecs.json.parseBoolean
import tenecs.json.parseInt
import tenecs.json.parseObject0
import tenecs.json.parseObject1
import tenecs.json.parseObject2
import tenecs.json.parseOr
import tenecs.json.parseString
import tenecs.json.toJson
import tenecs.string.join
import tenecs.test.UnitTestKit
import tenecs.test.UnitTestRegistry
import tenecs.test.UnitTests

struct Post(
  title: String
)

toJsonTests := implement UnitTests {
  public tests := (registry: UnitTestRegistry): Void => {
    registry.test("toJson", (testkit: UnitTestKit): Void => {
      assert := testkit.assert
      assert.equal("42", toJson(42))
      assert.equal("true", toJson(true))
      assert.equal("\"rawr\"", toJson("rawr"))
      assert.equal("{\"title\":\"the title\"}", toJson(Post("the title")))
      assert.equal("[]", toJson([String]()))
      assert.equal("[\"wow\"]", toJson([String]("wow")))
    })
  }
}

struct Todo(title: String, done: Boolean)

parseObjectTests := implement UnitTests {
  public tests := (registry: UnitTestRegistry): Void => {
    registry.test("parseObject0", (testkit: UnitTestKit): Void => {
      assert := testkit.assert
      parser := parseObject0((): String => {
        "ok"
      })
      assert.equal("ok", parser.parse("{}"))
      assert.equal("ok", parser.parse("{\"a\":true}"))
      assert.equal(JsonError("Could not parse object from 1"), parser.parse("1"))
    })
    registry.test("parseObject1", (testkit: UnitTestKit): Void => {
      assert := testkit.assert
      parser := parseObject1(Post, field("title", parseString()))
      assert.equal(Post("the title"), parser.parse("{\"title\":\"the title\"}"))
      assert.equal(JsonError("Could not find object field \"title\" in {\"a\":true}"), parser.parse("{\"a\":true}"))
      assert.equal(JsonError("Could not parse object field \"title\": Could not parse String from true"), parser.parse("{\"title\":true}"))
      assert.equal(JsonError("Could not parse object from 1"), parser.parse("1"))
    })
    registry.test("parseObject2", (testkit: UnitTestKit): Void => {
      assert := testkit.assert
      parser := parseObject2(Todo, field("title", parseString()), field("done", parseBoolean()))
      assert.equal(Todo("do it", false), parser.parse("{\"title\":\"do it\",\"done\":false}"))
      assert.equal(Todo("done it", true), parser.parse("{\"title\":\"done it\",\"done\":true}"))
      assert.equal(JsonError("Could not find object field \"title\" in {\"done\":true}"), parser.parse("{\"done\":true}"))
      assert.equal(JsonError("Could not find object field \"done\" in {\"title\":\"do\"}"), parser.parse("{\"title\":\"do\"}"))
      assert.equal(JsonError("Could not parse object field \"title\": Could not parse String from true"), parser.parse("{\"title\":true}"))
      assert.equal(JsonError("Could not parse object field \"done\": Could not parse Boolean from 1"), parser.parse("{\"title\":\"do it\",\"done\":1}"))
      assert.equal(JsonError("Could not parse object from 1"), parser.parse("1"))
    })
  }
}

parseBooleanTests := implement UnitTests {
  public tests := (registry: UnitTestRegistry): Void => {
    registry.test("true", (testkit: UnitTestKit): Void => {
      testkit.assert.equal(true, tryParse("true"))
    })
    registry.test("false", (testkit: UnitTestKit): Void => {
      testkit.assert.equal(false, tryParse("false"))
    })
    registry.test("fail f", (testkit: UnitTestKit): Void => {
      testkit.assert.equal("error: Could not parse Boolean from f", tryParse("f"))
    })
  }

  parser := parseBoolean()

  tryParse := (input: String): String | Boolean => {
    result := parser.parse(input)
    when result {
      is e: JsonError => {
        join("error: ", e.message)
      }
      is b: Boolean => {
        b
      }
    }
  }
}

parseIntTests := implement UnitTests {
  public tests := (registry: UnitTestRegistry): Void => {
    registry.test("0", (testkit: UnitTestKit): Void => {
      testkit.assert.equal(0, tryParse("0"))
    })
    registry.test("1234567", (testkit: UnitTestKit): Void => {
      testkit.assert.equal(1234567, tryParse("1234567"))
    })
    registry.test("fail 0.1", (testkit: UnitTestKit): Void => {
      testkit.assert.equal("error: Could not parse Int from 0.1", tryParse("0.1"))
    })
  }

  parser := parseInt()

  tryParse := (input: String): String | Int => {
    result := parser.parse(input)
    when result {
      is e: JsonError => {
        join("error: ", e.message)
      }
      is i: Int => {
        i
      }
    }
  }
}

parseOrTests := implement UnitTests {
  public tests := (registry: UnitTestRegistry): Void => {
    registry.test("string", (testkit: UnitTestKit): Void => {
      testkit.assert.equal("foo", tryParse("\"foo\""))
    })
    registry.test("boolean", (testkit: UnitTestKit): Void => {
      testkit.assert.equal(true, tryParse("true"))
    })
    registry.test("error", (testkit: UnitTestKit): Void => {
      testkit.assert.equal("error: Could not parse from 1", tryParse("1"))
    })
  }

  parser := parseOr(parseString(), parseBoolean())

  tryParse := (input: String): String | Boolean => {
    result := parser.parse(input)
    when result {
      is e: JsonError => {
        join("error: ", e.message)
      }
      is s: String => {
        s
      }
      is b: Boolean => {
        b
      }
    }
  }
}

parseStringTests := implement UnitTests {
  public tests := (registry: UnitTestRegistry): Void => {
    parser := parseString()
    tryParse := (input: String): String => {
      result := parser.parse(input)
      when result {
        is e: JsonError => {
          join("error: ", e.message)
        }
        is s: String => {
          s
        }
      }
    }
    registry.test("empty", (testkit: UnitTestKit): Void => {
      testkit.assert.equal("", tryParse("\"\""))
    })
    registry.test("foo", (testkit: UnitTestKit): Void => {
      testkit.assert.equal("foo", tryParse("\"foo\""))
    })
    registry.test("error", (testkit: UnitTestKit): Void => {
      testkit.assert.equal("error: Could not parse String from 1", tryParse("1"))
    })
  }
}

parseArrayTests := implement UnitTests {
  public tests := (registry: UnitTestRegistry): Void => {
    registry.test("empty string array", (testkit: UnitTestKit): Void => {
      parser := parseArray(parseString())
      testkit.assert.equal([String](), toArrayOfStringOrString(parser.parse("[]")))
    })
    registry.test("array with empty array", (testkit: UnitTestKit): Void => {
      parser := parseArray(parseArray(parseString()))
      testkit.assert.equal([Array<String>]([String]()), toArrayOfArrayOfStringOrString(parser.parse("[[]]")))
    })
    registry.test("nested failure", (testkit: UnitTestKit): Void => {
      parser := parseArray(parseString())
      testkit.assert.equal("error: Could not parse String from 1", toArrayOfStringOrString(parser.parse("[1]")))
    })
    registry.test("couple elements", (testkit: UnitTestKit): Void => {
      parser := parseArray(parseString())
      testkit.assert.equal([String]("a", "b"), toArrayOfStringOrString(parser.parse("[\"a\", \"b\"]")))
    })
  }

  toArrayOfStringOrString := (input: Array<String> | JsonError): Array<String> | String => {
    when input {
      is a: Array<String> => {
        a
      }
      is e: JsonError => {
        join("error: ", e.message)
      }
    }
  }

  toArrayOfArrayOfStringOrString := (input: Array<Array<String>> | JsonError): Array<Array<String>> | String => {
    when input {
      is a: Array<Array<String>> => {
        a
      }
      is e: JsonError => {
        join("error: ", e.message)
      }
    }
  }
}
