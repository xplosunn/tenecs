package test

import tenecs.test.UnitTests
import tenecs.test.UnitTestKit
import tenecs.test.UnitTestRegistry
import tenecs.array.filter
import tenecs.array.flatMap
import tenecs.array.fold
import tenecs.array.forEach
import tenecs.array.map
import tenecs.array.repeat
import tenecs.string.join
import tenecs.compare.eq

filterTests := implement UnitTests {
  public tests := (registry: UnitTestRegistry): Void => {
    registry.test("filter", (testkit: UnitTestKit): Void => {
      testkit.assert.equal<Array<String>>([String](), filter<String>([String]("a", "b", "c"), (elem) => false))
      testkit.assert.equal<Array<String>>([String]("a", "b", "c"), filter<String>([String]("a", "b", "c"), (elem) => true))
      testkit.assert.equal<Array<String>>([String]("b"), filter<String>([String]("a", "b", "c"), (a) => eq(a, "b")))
    })
  }
}

mapTests := implement UnitTests {
  public tests := (registry: UnitTestRegistry): Void => {
    registry.test("map", (testkit: UnitTestKit): Void => {
      addBang := (s: String): String => { join(s, "!") }
      testkit.assert.equal<Array<String>>([String](), map<String, String>([String](), addBang))
      testkit.assert.equal<Array<String>>([String]("hi!"), map<String, String>([String]("hi"), addBang))
      testkit.assert.equal<Array<String>>([String]("!", "a!", "!", "b!"), map<String, String>([String]("", "a", "", "b"), addBang))
    })
  }
}

flatMapTests := implement UnitTests {
  public tests := (registry: UnitTestRegistry): Void => {
    registry.test("flatMap", (testkit: UnitTestKit): Void => {
      addBang := (s: String): Array<String> => { [](s, "!") }
      testkit.assert.equal<Array<String>>([String](), flatMap<String, String>([String](), addBang))
      testkit.assert.equal<Array<String>>([String]("hi", "!"), flatMap<String, String>([String]("hi"), addBang))
      testkit.assert.equal<Array<String>>([String]("a", "!", "b", "!"), flatMap<String, String>([String]("a", "b"), addBang))
    })
  }
}

foldTests := implement UnitTests {
  public tests := (registry: UnitTestRegistry): Void => {
    registry.test("fold", (testkit: UnitTestKit): Void => {
      testkit.assert.equal<String>("r", fold<Boolean, String>([Boolean](), "r", (acc, elem) => { join(acc, "!") }))
      testkit.assert.equal<String>("_ab", fold<String, String>([]("a", "b"), "_", (acc, elem) => { join(acc, elem) }))
    })
  }
}

repeatTests := implement UnitTests {
  public tests := (registry: UnitTestRegistry): Void => {
    registry.test("repeat", (testkit: UnitTestKit): Void => {
      testkit.assert.equal<Array<String>>([String](), repeat<String>("", 0))
      testkit.assert.equal<Array<String>>([String](""), repeat<String>("", 1))
      testkit.assert.equal<Array<String>>([String]("", ""), repeat<String>("", 2))
      testkit.assert.equal<Array<String>>([String]("a"), repeat<String>("a", 1))
      testkit.assert.equal<Array<String>>([String]("a", "a"), repeat<String>("a", 2))
    })
  }
}

forEachTests := implement UnitTests {
  public tests := (registry: UnitTestRegistry): Void => {
    registry.test("forEach", (testkit: UnitTestKit): Void => {
      ref := testkit.runtime.ref.new("0")
      forEach([String]("1", "2", "3"), (elem: String): Void => ref.modify((r) => join(r, elem)))
      testkit.assert.equal("0123", ref.get())
    })
  }
}

