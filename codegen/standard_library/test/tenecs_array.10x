package test

import tenecs.test.UnitTests
import tenecs.test.UnitTestKit
import tenecs.test.UnitTestRegistry
import tenecs.array.filter
import tenecs.array.flatMap
import tenecs.array.fold
import tenecs.array.forEach
import tenecs.array.map
import tenecs.array.mapNotNull
import tenecs.array.repeat
import tenecs.string.join
import tenecs.compare.eq

filterTests := implement UnitTests {
  public tests := (registry: UnitTestRegistry): Void => {
    registry.test("filter", (testkit: UnitTestKit): Void => {
      testkit.assert.equal([String](), filter([]("a", "b", "c"), (elem) => false))
      testkit.assert.equal([]("a", "b", "c"), filter([]("a", "b", "c"), (elem) => true))
      testkit.assert.equal([]("b"), filter([]("a", "b", "c"), (a) => eq(a, "b")))
    })
  }
}

mapTests := implement UnitTests {
  public tests := (registry: UnitTestRegistry): Void => {
    registry.test("map", (testkit: UnitTestKit): Void => {
      addBang := (s: String): String => { join(s, "!") }
      testkit.assert.equal([String](), map([String](), addBang))
      testkit.assert.equal([]("hi!"), map([]("hi"), addBang))
      testkit.assert.equal([]("!", "a!", "!", "b!"), map([]("", "a", "", "b"), addBang))
    })
  }
}

mapNotNullTests := implement UnitTests {
  public tests := (registry: UnitTestRegistry): Void => {
    registry.test("mapNotNull", (testkit: UnitTestKit): Void => {
      testkit.assert.equal([String](), mapNotNull([String](), (str) => { str }))
      testkit.assert.equal([String](), mapNotNull<String, String>([String](), (str) => { null }))
      testkit.assert.equal([]("ab"), mapNotNull([]("a"), (str) => { join(str, "b") }))
      testkit.assert.equal([String](), mapNotNull<String, String>([]("a"), (str) => { null }))
      testkit.assert.equal([]("a", "b"), mapNotNull<String, String>([]("!", "a", "!", "b"), (str) => {
        if eq(str, "!") {
          null
        } else {
          str
        }
      }))
    })
  }
}

flatMapTests := implement UnitTests {
  public tests := (registry: UnitTestRegistry): Void => {
    registry.test("flatMap", (testkit: UnitTestKit): Void => {
      addBang := (s: String): Array<String> => { [](s, "!") }
      testkit.assert.equal([String](), flatMap([String](), addBang))
      testkit.assert.equal([]("hi", "!"), flatMap([]("hi"), addBang))
      testkit.assert.equal([]("a", "!", "b", "!"), flatMap([]("a", "b"), addBang))
    })
  }
}

foldTests := implement UnitTests {
  public tests := (registry: UnitTestRegistry): Void => {
    registry.test("fold", (testkit: UnitTestKit): Void => {
      testkit.assert.equal("r", fold([Boolean](), "r", (acc, elem) => { join(acc, "!") }))
      testkit.assert.equal("_ab", fold<String, String>([]("a", "b"), "_", (acc, elem) => { join(acc, elem) }))
    })
  }
}

repeatTests := implement UnitTests {
  public tests := (registry: UnitTestRegistry): Void => {
    registry.test("repeat", (testkit: UnitTestKit): Void => {
      testkit.assert.equal([String](), repeat("", 0))
      testkit.assert.equal([](""), repeat("", 1))
      testkit.assert.equal([]("", ""), repeat("", 2))
      testkit.assert.equal([]("a"), repeat("a", 1))
      testkit.assert.equal([]("a", "a"), repeat("a", 2))
    })
  }
}

forEachTests := implement UnitTests {
  public tests := (registry: UnitTestRegistry): Void => {
    registry.test("forEach", (testkit: UnitTestKit): Void => {
      ref := testkit.runtime.ref.new("0")
      forEach([String]("1", "2", "3"), (elem) => ref.modify((r) => join(r, elem)))
      testkit.assert.equal("0123", ref.get())
    })
  }
}

