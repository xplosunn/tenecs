package test

import tenecs.test.UnitTest
import tenecs.test.UnitTestKit
import tenecs.list.append
import tenecs.list.Break
import tenecs.list.filter
import tenecs.list.flatMap
import tenecs.list.fold
import tenecs.list.forEach
import tenecs.list.map
import tenecs.list.mapNotNull
import tenecs.list.mapUntil
import tenecs.list.repeat
import tenecs.string.join
import tenecs.compare.eq

_ := UnitTest("append", (testkit: UnitTestKit): Void => {
  testkit.assert.equal([]("a"), [String]()->append("a"))
  testkit.assert.equal([]("a", "b"), []("a")->append("b"))
  testkit.assert.equal([]("a", "b", "c"), []("a", "b")->append("c"))
  testkit.assert.equal([]("a", "b", "c", "d"), []("a", "b", "c")->append("d"))
})

_ := UnitTest("filter", (testkit: UnitTestKit): Void => {
  testkit.assert.equal([String](), []("a", "b", "c")->filter((elem) => false))
  testkit.assert.equal([]("a", "b", "c"), []("a", "b", "c")->filter((elem) => true))
  testkit.assert.equal([]("b"), []("a", "b", "c")->filter((a) => eq(a, "b")))
})

_ := UnitTest("map", (testkit: UnitTestKit): Void => {
  addBang := (s: String): String => { join(s, "!") }
  testkit.assert.equal([String](), [String]()->map(addBang))
  testkit.assert.equal([]("hi!"), []("hi")->map(addBang))
  testkit.assert.equal([]("!", "a!", "!", "b!"), []("", "a", "", "b")->map(addBang))
})

_ := UnitTest("mapNotNull", (testkit: UnitTestKit): Void => {
  testkit.assert.equal([String](), [String]()->mapNotNull((str) => { str }))
  testkit.assert.equal([String](), [String]()->mapNotNull<String, String>((str) => { null }))
  testkit.assert.equal([]("ab"), []("a")->mapNotNull((str) => { join(str, "b") }))
  testkit.assert.equal([String](), []("a")->mapNotNull<String, String>((str) => { null }))
  testkit.assert.equal([]("a", "b"), []("!", "a", "!", "b")->mapNotNull((str) => {
    if eq(str, "!") {
      null
    } else {
      str
    }
  }))
})

_ := UnitTest("mapUntil", (testkit: UnitTestKit): Void => {
  testkit.assert.equal([String](), [String]()->mapUntil<_, _, Boolean>((str) => { str }))
  testkit.assert.equal([String](), [String]()->mapUntil<_, String, Boolean>((str) => { Break(true) }))
  testkit.assert.equal(true, [String]("")->mapUntil<_, String, Boolean>((str) => { Break(true) }))
  testkit.assert.equal(true, []("a", "!")->mapUntil<_, String, Boolean>((str) => {
    if eq(str, "!") {
      Break(true)
    } else {
      str
    }
  }))
  testkit.assert.equal([]("a", "b"), []("a", "b")->mapUntil<_, String, Boolean>((str) => {
    if eq(str, "!") {
      Break(true)
    } else {
      str
    }
  }))
})

_ := UnitTest("flatMap", (testkit: UnitTestKit): Void => {
  addBang := (s: String): List<String> => { [](s, "!") }
  testkit.assert.equal([String](), [String]()->flatMap(addBang))
  testkit.assert.equal([]("hi", "!"), []("hi")->flatMap(addBang))
  testkit.assert.equal([]("a", "!", "b", "!"), []("a", "b")->flatMap(addBang))
})

_ := UnitTest("fold", (testkit: UnitTestKit): Void => {
  testkit.assert.equal("r", [Boolean]()->fold("r", (acc, elem) => { join(acc, "!") }))
  testkit.assert.equal("_ab", []("a", "b")->fold("_", (acc, elem) => { join(acc, elem) }))
})

_ := UnitTest("repeat", (testkit: UnitTestKit): Void => {
  testkit.assert.equal([String](), repeat("", 0))
  testkit.assert.equal([](""), repeat("", 1))
  testkit.assert.equal([]("", ""), repeat("", 2))
  testkit.assert.equal([]("a"), repeat("a", 1))
  testkit.assert.equal([]("a", "a"), repeat("a", 2))
})

_ := UnitTest("forEach", (testkit: UnitTestKit): Void => {
  ref := testkit.ref.new("0")
  []("1", "2", "3")->forEach((elem) => ref.modify((r) => join(r, elem)))
  testkit.assert.equal("0123", ref.get())
})
