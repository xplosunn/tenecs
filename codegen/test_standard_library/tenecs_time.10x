package test

import tenecs.test.UnitTest
import tenecs.int.plus
import tenecs.int.times
import tenecs.test.UnitTestSuite
import tenecs.time.Date
import tenecs.time.atStartOfMonth
import tenecs.time.plusYears
import tenecs.time.plusDays

_ := UnitTest("atStartOfMonth", (testkit): Void => {
  testkit.assert.equal(Date(2025, 2, 3)->atStartOfMonth(), Date(2025, 2, 1))
  testkit.assert.equal(Date(2025, 3, 30)->atStartOfMonth(), Date(2025, 3, 1))
  testkit.assert.equal(Date(2025, 4, 1)->atStartOfMonth(), Date(2025, 4, 1))
})

_ := UnitTest("plusYears", (testkit): Void => {
  testkit.assert.equal(Date(1999, 2, 3)->plusYears(2), Date(2001, 2, 3))
  testkit.assert.equal(Date(2024, 7, 1)->plusYears(1), Date(2025, 7, 1))
})

_ := UnitTestSuite("plusDays", (registry): Void => {
  registry.test("adding zero days (should return the same date)", (testkit): Void => {
    testkit.assert.equal(Date(2025, 2, 3)->plusDays(0), Date(2025, 2, 3))
  })
  registry.test("adding a few days within the same month", (testkit): Void => {
    testkit.assert.equal(Date(2025, 2, 3)->plusDays(5), Date(2025, 2, 8))
  })
  registry.test("adding days that cross into the next month", (testkit): Void => {
    testkit.assert.equal(Date(2025, 2, 28)->plusDays(3), Date(2025, 3, 3))
  })
  registry.test("adding days that cross into the next year", (testkit): Void => {
    testkit.assert.equal(Date(2025, 12, 30)->plusDays(5), Date(2026, 1, 4))
  })
  registry.test("adding negative days (should subtract days)", (testkit): Void => {
    testkit.assert.equal(Date(2025, 2, 3)->plusDays(-5), Date(2025, 1, 29))
  })
  registry.test("leap year: adding days across February in a leap year", (testkit): Void => {
    testkit.assert.equal(Date(2024, 2, 28)->plusDays(1), Date(2024, 2, 29)) // 2024 is a leap year
    testkit.assert.equal(Date(2024, 2, 28)->plusDays(2), Date(2024, 3, 1))  // Crossing into March
  })
  registry.test("leap year: adding days across February in a non-leap year", (testkit): Void => {
    testkit.assert.equal(Date(2025, 2, 28)->plusDays(1), Date(2025, 3, 1))  // 2025 is not a leap year
  })
  registry.test("adding days across a leap year boundary (e.g., from 2023 to 2024)", (testkit): Void => {
    testkit.assert.equal(Date(2023, 12, 31)->plusDays(60), Date(2024, 2, 29)) // 2024 is a leap year
  })
  registry.test("adding days across multiple leap years", (testkit): Void => {
    testkit.assert.equal(Date(2020, 2, 28)->plusDays(365->times(4)->plus(2)), Date(2024, 2, 29)) // 2020 and 2024 are leap years
  })
})
