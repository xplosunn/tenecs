package test

import tenecs.test.UnitTest
import tenecs.test.UnitTestKit
import tenecs.error.Error
import tenecs.list.atIndexGet
import tenecs.list.atIndexSet
import tenecs.list.append
import tenecs.list.appendAll
import tenecs.list.Break
import tenecs.list.filter
import tenecs.list.find
import tenecs.list.first
import tenecs.list.flatMap
import tenecs.list.fold
import tenecs.list.forEach
import tenecs.list.map
import tenecs.list.mapNotNull
import tenecs.list.mapUntil
import tenecs.list.repeat
import tenecs.string.join
import tenecs.string.startsWith
import tenecs.compare.eq

_ := UnitTest("append", (testkit: UnitTestKit): Void => {
  testkit.assert.equal(["a"], <String>[]->append("a"))
  testkit.assert.equal(["a", "b"], ["a"]->append("b"))
  testkit.assert.equal(["a", "b", "c"], ["a", "b"]->append("c"))
  testkit.assert.equal(["a", "b", "c", "d"], ["a", "b", "c"]->append("d"))
})

_ := UnitTest("appendAll", (testkit: UnitTestKit): Void => {
  testkit.assert.equal(["a"], <String>[]->appendAll(["a"]))
  testkit.assert.equal(["a", "b"], ["a"]->appendAll(["b"]))
  testkit.assert.equal(["a", "b", "c", "d"], ["a", "b"]->appendAll(["c", "d"]))
})

_ := UnitTest("filter", (testkit: UnitTestKit): Void => {
  testkit.assert.equal(<String>[], ["a", "b", "c"]->filter((elem) => false))
  testkit.assert.equal(["a", "b", "c"], ["a", "b", "c"]->filter((elem) => true))
  testkit.assert.equal(["b"], ["a", "b", "c"]->filter((a) => eq(a, "b")))
})

_ := UnitTest("find", (testkit: UnitTestKit): Void => {
  testkit.assert.equal(null, ["a", "b", "c"]->find<String, String>((elem) => { null }))
  testkit.assert.equal("bb", ["ab", "bb", "bc"]->find((elem) => {
    if elem->startsWith("b") {
      elem
    } else {
      null
    }
  }))
})

_ := UnitTest("map", (testkit: UnitTestKit): Void => {
  addBang := (s: String): String => { join(s, "!") }
  testkit.assert.equal(<String>[], <String>[]->map(addBang))
  testkit.assert.equal(["hi!"], ["hi"]->map(addBang))
  testkit.assert.equal(["!", "a!", "!", "b!"], ["", "a", "", "b"]->map(addBang))
})

_ := UnitTest("mapNotNull", (testkit: UnitTestKit): Void => {
  testkit.assert.equal(<String>[], <String>[]->mapNotNull((str) => { str }))
  testkit.assert.equal(<String>[], <String>[]->mapNotNull<String, String>((str) => { null }))
  testkit.assert.equal(["ab"], ["a"]->mapNotNull((str) => { join(str, "b") }))
  testkit.assert.equal(<String>[], ["a"]->mapNotNull<String, String>((str) => { null }))
  testkit.assert.equal(["a", "b"], ["!", "a", "!", "b"]->mapNotNull((str) => {
    if eq(str, "!") {
      null
    } else {
      str
    }
  }))
})

_ := UnitTest("mapUntil", (testkit: UnitTestKit): Void => {
  testkit.assert.equal(<String>[], <String>[]->mapUntil<_, _, Boolean>((str) => { str }))
  testkit.assert.equal(<String>[], <String>[]->mapUntil<_, String, Boolean>((str) => { Break(true) }))
  testkit.assert.equal(true, <String>[""]->mapUntil<_, String, Boolean>((str) => { Break(true) }))
  testkit.assert.equal(true, ["a", "!"]->mapUntil<_, String, Boolean>((str) => {
    if eq(str, "!") {
      Break(true)
    } else {
      str
    }
  }))
  testkit.assert.equal(["a", "b"], ["a", "b"]->mapUntil<_, String, Boolean>((str) => {
    if eq(str, "!") {
      Break(true)
    } else {
      str
    }
  }))
})

_ := UnitTest("flatMap", (testkit: UnitTestKit): Void => {
  addBang := (s: String): List<String> => { [s, "!"] }
  testkit.assert.equal(<String>[], <String>[]->flatMap(addBang))
  testkit.assert.equal(["hi", "!"], ["hi"]->flatMap(addBang))
  testkit.assert.equal(["a", "!", "b", "!"], ["a", "b"]->flatMap(addBang))
})

_ := UnitTest("fold", (testkit: UnitTestKit): Void => {
  testkit.assert.equal("r", <Boolean>[]->fold("r", (acc, elem) => { join(acc, "!") }))
  testkit.assert.equal("_ab", ["a", "b"]->fold("_", (acc, elem) => { join(acc, elem) }))
})

_ := UnitTest("repeat", (testkit: UnitTestKit): Void => {
  testkit.assert.equal(<String>[], repeat("", 0))
  testkit.assert.equal([""], repeat("", 1))
  testkit.assert.equal(["", ""], repeat("", 2))
  testkit.assert.equal(["a"], repeat("a", 1))
  testkit.assert.equal(["a", "a"], repeat("a", 2))
})

_ := UnitTest("forEach", (testkit: UnitTestKit): Void => {
  ref := testkit.ref.new("0")
  ["1", "2", "3"]->forEach((elem) => ref.modify((r) => join(r, elem)))
  testkit.assert.equal("0123", ref.get())
})

_ := UnitTest("first", (testkit: UnitTestKit): Void => {
  testkit.assert.equal<String | Void>("a", ["a"]->first())
  testkit.assert.equal<String | Void>("a", ["a", "b"]->first())
  testkit.assert.equal<String | Void>("b", ["b", "a"]->first())
  testkit.assert.equal<String | Void>(null, <String>[]->first())
})

_ := UnitTest("atIndexGet", (testkit: UnitTestKit): Void => {
  testkit.assert.equal<String | Error>("a", ["a", "b"]->atIndexGet(0))
  testkit.assert.equal<String | Error>("b", ["a", "b"]->atIndexGet(1))
  testkit.assert.equal<String | Error>(Error("Out of bounds"), ["a", "b"]->atIndexGet(-1))
  testkit.assert.equal<String | Error>(Error("Out of bounds"), ["a", "b"]->atIndexGet(-2))
  testkit.assert.equal<String | Error>(Error("Out of bounds"), <String>[]->atIndexGet(0))
})

_ := UnitTest("atIndexSet", (testkit: UnitTestKit): Void => {
  testkit.assert.equal<List<String> | Error>(["z", "b"], ["a", "b"]->atIndexSet(0, "z"))
  testkit.assert.equal<List<String> | Error>(["a", "z"], ["a", "b"]->atIndexSet(1, "z"))
  testkit.assert.equal<List<String> | Error>(Error("Out of bounds"), ["a", "b"]->atIndexSet(-1, "z"))
  testkit.assert.equal<List<String> | Error>(Error("Out of bounds"), ["a", "b"]->atIndexSet(-2, "z"))
  testkit.assert.equal<List<String> | Error>(Error("Out of bounds"), <String>[]->atIndexSet(0, "z"))
})
