package test

import tenecs.string.characters
import tenecs.string.contains
import tenecs.string.endsWith
import tenecs.string.startsWith
import tenecs.string.stripPrefix
import tenecs.string.stripSuffix
import tenecs.test.UnitTest
import tenecs.test.UnitTestKit

_ := UnitTest("characters", (testkit: UnitTestKit): Void => {
  testkit.assert.equal([], characters(""))
  testkit.assert.equal(["a"], characters("a"))
  testkit.assert.equal(["a", "b", "c"], characters("abc"))
  testkit.assert.equal(["1", "2", "3"], characters("123"))
  testkit.assert.equal([" ", "a", " ", "b", " "], characters(" a b "))
})

_ := UnitTest("startsWith", (testkit: UnitTestKit): Void => {
  testkit.assert.equal(true, contains("", ""))
  testkit.assert.equal(true, contains("a", ""))
  testkit.assert.equal(true, contains("aa", "a"))
  testkit.assert.equal(true, contains("ab", "b"))
  testkit.assert.equal(true, contains("aba", "b"))
  testkit.assert.equal(false, contains("aba", "c"))
})

_ := UnitTest("startsWith", (testkit: UnitTestKit): Void => {
  testkit.assert.equal(true, startsWith("", ""))
  testkit.assert.equal(true, startsWith("a", ""))
  testkit.assert.equal(true, startsWith("ab", ""))

  testkit.assert.equal(true, startsWith("abc", "a"))
  testkit.assert.equal(true, startsWith("abc", "ab"))
  testkit.assert.equal(true, startsWith("abc", "abc"))

  testkit.assert.equal(false, startsWith("abc", "abcd"))
  testkit.assert.equal(false, startsWith("abc", "abd"))
  testkit.assert.equal(false, startsWith("abc", "ad"))
  testkit.assert.equal(false, startsWith("abc", "d"))
})

_ := UnitTest("endsWith", (testkit: UnitTestKit): Void => {
  testkit.assert.equal(true, endsWith("", ""))
  testkit.assert.equal(true, endsWith("a", ""))
  testkit.assert.equal(true, endsWith("ab", ""))

  testkit.assert.equal(true, endsWith("abc", "c"))
  testkit.assert.equal(true, endsWith("abc", "bc"))
  testkit.assert.equal(true, endsWith("abc", "abc"))

  testkit.assert.equal(false, endsWith("abc", "dabc"))
  testkit.assert.equal(false, endsWith("abc", "dab"))
  testkit.assert.equal(false, endsWith("abc", "da"))
  testkit.assert.equal(false, endsWith("abc", "d"))
})

_ := UnitTest("stripPrefix", (testkit: UnitTestKit): Void => {
  testkit.assert.equal("", stripPrefix("", ""))
  testkit.assert.equal("a", stripPrefix("a", ""))
  testkit.assert.equal("", stripPrefix("a", "a"))
  testkit.assert.equal("b", stripPrefix("ab", "a"))
  testkit.assert.equal("bc", stripPrefix("abc", "a"))
  testkit.assert.equal("c", stripPrefix("abc", "ab"))
  testkit.assert.equal("", stripPrefix("abc", "abc"))
  testkit.assert.equal("abc", stripPrefix("abc", "abcd"))
  testkit.assert.equal("abc", stripPrefix("abc", "xyz"))
})

_ := UnitTest("stripSuffix", (testkit: UnitTestKit): Void => {
  testkit.assert.equal("", stripSuffix("", ""))
  testkit.assert.equal("a", stripSuffix("a", ""))
  testkit.assert.equal("", stripSuffix("a", "a"))
  testkit.assert.equal("a", stripSuffix("ab", "b"))
  testkit.assert.equal("ab", stripSuffix("abc", "c"))
  testkit.assert.equal("a", stripSuffix("abc", "bc"))
  testkit.assert.equal("", stripSuffix("abc", "abc"))
  testkit.assert.equal("abc", stripSuffix("abc", "abcd"))
  testkit.assert.equal("abc", stripSuffix("abc", "xyz"))
})
