package test

import tenecs.string.characters
import tenecs.string.contains
import tenecs.string.firstChar
import tenecs.string.firstCharCode
import tenecs.string.endsWith
import tenecs.string.startsWith
import tenecs.string.stripPrefix
import tenecs.string.stripSuffix
import tenecs.string.length
import tenecs.string.toLowerCase
import tenecs.string.toUpperCase
import tenecs.string.trim
import tenecs.string.trimLeft
import tenecs.string.trimRight
import tenecs.string.isEmpty
import tenecs.string.isBlank
import tenecs.string.repeat
import tenecs.string.reverse
import tenecs.string.padLeft
import tenecs.string.padRight
import tenecs.test.UnitTest
import tenecs.test.UnitTestKit

_ := UnitTest("characters", (testkit: UnitTestKit): Void => {
  testkit.assert.equal([], characters(""))
  testkit.assert.equal(["a"], characters("a"))
  testkit.assert.equal(["a", "b", "c"], characters("abc"))
  testkit.assert.equal(["1", "2", "3"], characters("123"))
  testkit.assert.equal([" ", "a", " ", "b", " "], characters(" a b "))
})

_ := UnitTest("startsWith", (testkit: UnitTestKit): Void => {
  testkit.assert.equal(true, contains("", ""))
  testkit.assert.equal(true, contains("a", ""))
  testkit.assert.equal(true, contains("aa", "a"))
  testkit.assert.equal(true, contains("ab", "b"))
  testkit.assert.equal(true, contains("aba", "b"))
  testkit.assert.equal(false, contains("aba", "c"))
})

_ := UnitTest("startsWith", (testkit: UnitTestKit): Void => {
  testkit.assert.equal(true, startsWith("", ""))
  testkit.assert.equal(true, startsWith("a", ""))
  testkit.assert.equal(true, startsWith("ab", ""))

  testkit.assert.equal(true, startsWith("abc", "a"))
  testkit.assert.equal(true, startsWith("abc", "ab"))
  testkit.assert.equal(true, startsWith("abc", "abc"))

  testkit.assert.equal(false, startsWith("abc", "abcd"))
  testkit.assert.equal(false, startsWith("abc", "abd"))
  testkit.assert.equal(false, startsWith("abc", "ad"))
  testkit.assert.equal(false, startsWith("abc", "d"))
})

_ := UnitTest("endsWith", (testkit: UnitTestKit): Void => {
  testkit.assert.equal(true, endsWith("", ""))
  testkit.assert.equal(true, endsWith("a", ""))
  testkit.assert.equal(true, endsWith("ab", ""))

  testkit.assert.equal(true, endsWith("abc", "c"))
  testkit.assert.equal(true, endsWith("abc", "bc"))
  testkit.assert.equal(true, endsWith("abc", "abc"))

  testkit.assert.equal(false, endsWith("abc", "dabc"))
  testkit.assert.equal(false, endsWith("abc", "dab"))
  testkit.assert.equal(false, endsWith("abc", "da"))
  testkit.assert.equal(false, endsWith("abc", "d"))
})

_ := UnitTest("stripPrefix", (testkit: UnitTestKit): Void => {
  testkit.assert.equal("", stripPrefix("", ""))
  testkit.assert.equal("a", stripPrefix("a", ""))
  testkit.assert.equal("", stripPrefix("a", "a"))
  testkit.assert.equal("b", stripPrefix("ab", "a"))
  testkit.assert.equal("bc", stripPrefix("abc", "a"))
  testkit.assert.equal("c", stripPrefix("abc", "ab"))
  testkit.assert.equal("", stripPrefix("abc", "abc"))
  testkit.assert.equal("abc", stripPrefix("abc", "abcd"))
  testkit.assert.equal("abc", stripPrefix("abc", "xyz"))
})

_ := UnitTest("stripSuffix", (testkit: UnitTestKit): Void => {
  testkit.assert.equal("", stripSuffix("", ""))
  testkit.assert.equal("a", stripSuffix("a", ""))
  testkit.assert.equal("", stripSuffix("a", "a"))
  testkit.assert.equal("a", stripSuffix("ab", "b"))
  testkit.assert.equal("ab", stripSuffix("abc", "c"))
  testkit.assert.equal("a", stripSuffix("abc", "bc"))
  testkit.assert.equal("", stripSuffix("abc", "abc"))
  testkit.assert.equal("abc", stripSuffix("abc", "abcd"))
  testkit.assert.equal("abc", stripSuffix("abc", "xyz"))
})

_ := UnitTest("length", (testkit: UnitTestKit): Void => {
  testkit.assert.equal(0, length(""))
  testkit.assert.equal(1, length("a"))
  testkit.assert.equal(3, length("abc"))
  testkit.assert.equal(5, length("hello"))
  testkit.assert.equal(3, length("   "))
})

_ := UnitTest("toLowerCase", (testkit: UnitTestKit): Void => {
  testkit.assert.equal("", toLowerCase(""))
  testkit.assert.equal("abc", toLowerCase("abc"))
  testkit.assert.equal("abc", toLowerCase("ABC"))
  testkit.assert.equal("abc123", toLowerCase("ABC123"))
  testkit.assert.equal("hello world", toLowerCase("HELLO WORLD"))
})

_ := UnitTest("toUpperCase", (testkit: UnitTestKit): Void => {
  testkit.assert.equal("", toUpperCase(""))
  testkit.assert.equal("ABC", toUpperCase("abc"))
  testkit.assert.equal("ABC", toUpperCase("ABC"))
  testkit.assert.equal("ABC123", toUpperCase("abc123"))
  testkit.assert.equal("HELLO WORLD", toUpperCase("hello world"))
})

_ := UnitTest("trim", (testkit: UnitTestKit): Void => {
  testkit.assert.equal("", trim(""))
  testkit.assert.equal("abc", trim("abc"))
  testkit.assert.equal("abc", trim(" abc"))
  testkit.assert.equal("abc", trim("abc "))
  testkit.assert.equal("abc", trim(" abc "))
  testkit.assert.equal("a b c", trim(" a b c "))
})

_ := UnitTest("trimLeft", (testkit: UnitTestKit): Void => {
  testkit.assert.equal("", trimLeft(""))
  testkit.assert.equal("abc", trimLeft("abc"))
  testkit.assert.equal("abc", trimLeft(" abc"))
  testkit.assert.equal("abc ", trimLeft("abc "))
  testkit.assert.equal("abc ", trimLeft(" abc "))
  testkit.assert.equal("a b c ", trimLeft(" a b c "))
})

_ := UnitTest("trimRight", (testkit: UnitTestKit): Void => {
  testkit.assert.equal("", trimRight(""))
  testkit.assert.equal("abc", trimRight("abc"))
  testkit.assert.equal(" abc", trimRight(" abc"))
  testkit.assert.equal("abc", trimRight("abc "))
  testkit.assert.equal(" abc", trimRight(" abc "))
  testkit.assert.equal(" a b c", trimRight(" a b c "))
})

_ := UnitTest("isEmpty", (testkit: UnitTestKit): Void => {
  testkit.assert.equal(true, isEmpty(""))
  testkit.assert.equal(false, isEmpty(" "))
  testkit.assert.equal(false, isEmpty("a"))
  testkit.assert.equal(false, isEmpty("abc"))
})

_ := UnitTest("isBlank", (testkit: UnitTestKit): Void => {
  testkit.assert.equal(true, isBlank(""))
  testkit.assert.equal(true, isBlank(" "))
  testkit.assert.equal(true, isBlank("   "))
  testkit.assert.equal(false, isBlank("a"))
  testkit.assert.equal(false, isBlank(" a "))
})

_ := UnitTest("repeat", (testkit: UnitTestKit): Void => {
  testkit.assert.equal("", repeat("", 0))
  testkit.assert.equal("", repeat("abc", 0))
  testkit.assert.equal("abc", repeat("abc", 1))
  testkit.assert.equal("abcabc", repeat("abc", 2))
  testkit.assert.equal("abcabcabc", repeat("abc", 3))
})

_ := UnitTest("reverse", (testkit: UnitTestKit): Void => {
  testkit.assert.equal("", reverse(""))
  testkit.assert.equal("a", reverse("a"))
  testkit.assert.equal("cba", reverse("abc"))
  testkit.assert.equal("olleh", reverse("hello"))
  testkit.assert.equal("   ", reverse("   "))
})

_ := UnitTest("padLeft", (testkit: UnitTestKit): Void => {
  testkit.assert.equal("abc", padLeft("abc", 0, " "))
  testkit.assert.equal("abc", padLeft("abc", 2, " "))
  testkit.assert.equal("abc", padLeft("abc", 3, " "))
  testkit.assert.equal(" abc", padLeft("abc", 4, " "))
  testkit.assert.equal("  abc", padLeft("abc", 5, " "))
})

_ := UnitTest("padRight", (testkit: UnitTestKit): Void => {
  testkit.assert.equal("abc", padRight("abc", 0, " "))
  testkit.assert.equal("abc", padRight("abc", 2, " "))
  testkit.assert.equal("abc", padRight("abc", 3, " "))
  testkit.assert.equal("abc ", padRight("abc", 4, " "))
  testkit.assert.equal("abc  ", padRight("abc", 5, " "))
})

_ := UnitTest("firstCharCode", (testkit: UnitTestKit): Void => {
  testkit.assert.equal(-1, ""->firstCharCode())
  testkit.assert.equal(97, "a"->firstCharCode())
  testkit.assert.equal(97, "ab"->firstCharCode())
  testkit.assert.equal(97, "abc"->firstCharCode())
  testkit.assert.equal(122, "z"->firstCharCode())
  testkit.assert.equal(65, "A"->firstCharCode())
  testkit.assert.equal(90, "Z"->firstCharCode())
})

_ := UnitTest("firstChar", (testkit: UnitTestKit): Void => {
  testkit.assert.equal("", ""->firstChar())
  testkit.assert.equal("a", "a"->firstChar())
  testkit.assert.equal("a", "ab"->firstChar())
  testkit.assert.equal("a", "abc"->firstChar())
  testkit.assert.equal("x", "x"->firstChar())
  testkit.assert.equal("x", "xy"->firstChar())
})